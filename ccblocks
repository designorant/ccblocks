#!/usr/bin/env bash

# ccblocks - Main CLI interface
# Claude Code block scheduler

set -euo pipefail

# Get the directory where ccblocks is installed (resolve symlinks)
SOURCE="${BASH_SOURCE[0]}"
while [ -L "$SOURCE" ]; do
	DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"

# Source common library
# shellcheck source=lib/common.sh
# Handle both direct installation and Homebrew structure
if [ -f "$SCRIPT_DIR/lib/common.sh" ]; then
	source "$SCRIPT_DIR/lib/common.sh"
elif [ -f "$SCRIPT_DIR/../lib/common.sh" ]; then
	source "$SCRIPT_DIR/../lib/common.sh"
else
	echo "Error: Could not find common.sh library" >&2
	exit 1
fi

# Show usage
show_usage() {
	show_logo
	echo ""
	echo "Usage: ccblocks <command> [options]"
	echo ""
	echo "Commands:"
	echo "  setup               # Install and configure ccblocks scheduling"
	echo "  status              # Show current block and schedule status"
	echo "  trigger             # Manually trigger a new block now"
	echo "  schedule <action>   # Manage scheduling patterns"
	echo "  pause               # Temporarily disable ccblocks"
	echo "  resume              # Re-enable paused schedule"
	echo "  uninstall           # Remove ccblocks completely"
	echo "  help                # Show this help message"
	echo ""
	echo "Schedule actions:"
	echo "  list                   # List all available schedules"
	echo "  current                # Show current active schedule"
	echo "  apply <name> [hours]   # Apply a schedule (preset or custom)"
	echo "  pause                  # Pause ccblocks"
	echo "  resume                 # Resume after pause"
	echo "  remove                 # Remove all ccblocks schedules"
	echo ""
	echo "Examples:"
	echo "  ccblocks setup                          # Initial installation"
	echo "  ccblocks status                         # Check current status"
	echo "  ccblocks trigger                        # Trigger a new block"
	echo "  ccblocks schedule list                  # Show schedules"
	echo "  ccblocks schedule apply 247             # Apply 24/7 preset"
	echo "  ccblocks schedule apply custom          # Interactive custom"
	echo "  ccblocks schedule apply custom 0,8,16   # Custom with hours"
	echo "  ccblocks pause                          # Pause for vacation"
	echo "  ccblocks resume                         # Resume schedule"
	echo ""
	echo "For more help on specific commands:"
	echo "  ccblocks setup --help"
	echo "  ccblocks status --help"
	echo "  ccblocks schedule --help"
}

# Main command dispatcher
main() {
	case "${1:-help}" in
	"setup")
		shift
		exec "$SCRIPT_DIR/bin/setup.sh" "$@"
		;;
	"status")
		shift
		exec "$SCRIPT_DIR/bin/status.sh" "$@"
		;;
	"trigger")
		# Detect OS and initialize variables to find helper
		detect_os || exit 1
		init_os_vars "$SCRIPT_DIR" || exit 1
		exec "$HELPER" start
		;;
	"schedule")
		shift
		exec "$SCRIPT_DIR/bin/schedule.sh" "$@"
		;;
	"pause")
		exec "$SCRIPT_DIR/bin/schedule.sh" pause
		;;
	"resume" | "unpause")
		exec "$SCRIPT_DIR/bin/schedule.sh" resume
		;;
	"uninstall")
		shift
		exec "$SCRIPT_DIR/bin/uninstall.sh" "$@"
		;;
	"help" | "-h" | "--help" | "")
		show_usage
		;;
	"--version" | "-v")
		# Version injected by Homebrew during installation
		VERSION="__VERSION__"
		# Fallback to VERSION file for development/non-Homebrew installations
		if [ "$VERSION" = "__VERSION__" ] && [ -f "$SCRIPT_DIR/VERSION" ]; then
			VERSION=$(tr -d '\n\r' <"$SCRIPT_DIR/VERSION")
		elif [ "$VERSION" = "__VERSION__" ]; then
			VERSION="unknown"
		fi
		echo "ccblocks $VERSION"
		;;
	*)
		print_error "Unknown command: $1"
		echo ""
		show_usage
		exit 1
		;;
	esac
}

# Run main function
main "$@"
