name: Publish
run-name: Publish • ${{ github.event.workflow_run.head_commit.message }}

on:
  workflow_run:
    workflows: ["Test"]
    branches: [master]
    types:
      - completed

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_exists: ${{ steps.check_tag.outputs.exists }}
      version_changed: ${{ steps.check_version_changed.outputs.changed }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if VERSION file changed
        id: check_version_changed
        run: |
          SHA="${{ github.event.workflow_run.head_sha }}"

          # Check if this is the first commit (no parent)
          if ! git rev-parse "${SHA}~1" >/dev/null 2>&1; then
            echo "First commit detected - checking if VERSION exists"
            if git ls-tree -r "${SHA}" --name-only | grep -q "^VERSION$"; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "VERSION file exists in first commit"
            else
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "VERSION file not in first commit, skipping release"
            fi
          else
            # Normal case: compare with parent commit
            if git diff --name-only "${SHA}~1" "${SHA}" | grep -q "^VERSION$"; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "VERSION file changed"
            else
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "VERSION file not changed, skipping release"
            fi
          fi

      - name: Get version from VERSION file
        if: steps.check_version_changed.outputs.changed == 'true'
        id: get_version
        run: |
          VERSION=$(tr -d '\n\r' < VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if tag already exists
        if: steps.check_version_changed.outputs.changed == 'true'
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} does not exist"
          fi

  release:
    name: Publish
    needs: validate
    if: needs.validate.outputs.version_changed == 'true' && needs.validate.outputs.tag_exists == 'false'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"

          # Get commits since last tag (or all if no previous tag)
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
            echo "## Changes since ${LAST_TAG}" > changelog.md
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
            echo "## Initial Release" > changelog.md
          fi

          echo "" >> changelog.md
          echo "$COMMITS" >> changelog.md
          echo "" >> changelog.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/commits/v${VERSION}" >> changelog.md

          cat changelog.md

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create tag only if it doesn't exist
          if ! git rev-parse "v${{ needs.validate.outputs.version }}" >/dev/null 2>&1; then
            git tag -a "v${{ needs.validate.outputs.version }}" -m "Release v${{ needs.validate.outputs.version }}"
            git push origin "v${{ needs.validate.outputs.version }}"
            echo "Tag v${{ needs.validate.outputs.version }} created and pushed"
          else
            echo "Tag v${{ needs.validate.outputs.version }} already exists, skipping"
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: v${{ needs.validate.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to Homebrew tap
        uses: dawidd6/action-homebrew-bump-formula@v3
        with:
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          formula: ccblocks
          tap: designorant/homebrew-tap
          tag: v${{ needs.validate.outputs.version }}

      - name: Auto-merge Homebrew tap PR
        env:
          GH_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        run: |
          # Wait for PR to be created
          sleep 5

          # Find and merge the bump PR
          PR_NUMBER=$(gh pr list \
            --repo designorant/homebrew-tap \
            --head "bump-ccblocks-${{ needs.validate.outputs.version }}" \
            --json number \
            --jq '.[0].number')

          if [ -n "$PR_NUMBER" ]; then
            gh pr merge "$PR_NUMBER" \
              --repo designorant/homebrew-tap \
              --squash \
              --subject "chore: bump ccblocks to ${{ needs.validate.outputs.version }}" \
              --body ""
            echo "✓ Merged PR #$PR_NUMBER"
          else
            echo "⚠ No PR found for bump-ccblocks-${{ needs.validate.outputs.version }}"
            exit 1
          fi
